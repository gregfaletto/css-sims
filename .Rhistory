)
inds <- 1:round(n/2)
results <- css(X=X, y=y, lambda=lambda
, clusters=clusters
# , clusters=list()
# , clusters=1:10
# , sampling.type = "SS"
# B = 100,
# , prop_feats_remove = .5
, train_inds = inds
)
nrow(X)
n
inds <- 1:40
results <- css(X=X, y=y, lambda=lambda
, clusters=clusters
# , clusters=list()
# , clusters=1:10
# , sampling.type = "SS"
# B = 100,
# , prop_feats_remove = .5
, train_inds = inds
)
str(results)
predictions <- results |> getCssPreds(testX = testx, weighting="sparse",
cutoff=0.3
, min_num_clusts=1
, max_num_clusts=3
)
predictions
train_x <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
train_y <- rnorm(n_test)
preds2 <- results |> getCssPreds(testX = testx, weighting=w,
cutoff=c, min_num_clusts=1, max_num_clusts=3,
trainX=train_x
, trainY=train_y
)
preds2 <- results |> getCssPreds(testX = testx, weighting="sparse",
cutoff=0.3, min_num_clusts=1, max_num_clusts=3,
trainX=train_x
, trainY=train_y)
preds2
selections <- results |> getCssSelections(weighting=w, cutoff=c
# , min_num_clusts=1
# , max_num_clusts=3
)
selections <- results |> getCssSelections(weighting="sparse", cutoff=0.3
# , min_num_clusts=1
# , max_num_clusts=3
)
str(selections)
selections$selected_clusts
selections$selected_feats
results |> print.cssr(cutoff=c, min_num_clusts=1, max_num_clusts=3)
print(results)
print(results, cutoff=0.3, max_num_clusts=5)
x_design <- results |> getCssDesign(testx, weighting=w, cutoff=c, min_num_clusts=1, max_num_clusts=3)
x_design <- results |> getCssDesign(testx, weighting="weighted_avg", cutoff=0.3,
min_num_clusts=1, max_num_clusts=3)
str(x_design)
rm(list=ls())
data <- genClusteredData(n = 80, # Sample size
p = 40, # Number of features
cluster_size = 10, # Number of features in a cluster correlated with a latent variable
k_unclustered = 10, # Number of unclustered features that influence y
snr = 3 # Signal-to-noise ratio in the response y generated from the data.
)
X <- data$X
y <- data$y
output <- cssSelect(X, y)
output$selected_feats
library(cssr)
data <- genClusteredData(n = 80, # Sample size
p = 40, # Number of features
cluster_size = 10, # Number of features in a cluster correlated with a latent variable
k_unclustered = 10, # Number of unclustered features that influence y
snr = 3 # Signal-to-noise ratio in the response y generated from the data.
)
X <- data$X
y <- data$y
output <- cssSelect(X, y)
output$selected_feats
clus_output <- cssSelect(X, y, clusters=list("Z_cluster"=1:10))
clus_output$selected_feats
clus_output$selected_clusts
clusters <- list("Z_clust"=1:10, 36:40)
# Wrapper functions (easy!)
n_test <- 50
n <- 80
p <- 40
testx <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
cssPredict(X, y, testx, clusters)
# Get a good lambda
lambda <- getLassoLambda(X, y)
# clusters <- list(1:10, 46:40)
# clusters <- 1:10
inds <- 1:40
results <- css(X=X, y=y, lambda=lambda
, clusters=clusters
# , clusters=list()
# , clusters=1:10
# , sampling.type = "SS"
# B = 100,
# , prop_feats_remove = .5
, train_inds = inds
)
str(results)
predictions <- results |> getCssPreds(testX = testx, weighting="sparse",
cutoff=0.3
, min_num_clusts=1
, max_num_clusts=3
)
predictions
train_x <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
train_y <- rnorm(n_test)
preds2 <- results |> getCssPreds(testX = testx, weighting="sparse",
cutoff=0.3, min_num_clusts=1, max_num_clusts=3,
trainX=train_x
, trainY=train_y)
preds2
selections <- results |> getCssSelections(weighting="sparse", cutoff=0.3
# , min_num_clusts=1
# , max_num_clusts=3
)
str(selections)
selections$selected_clusts
selections$selected_feats
print(results, cutoff=0.3, max_num_clusts=5)
x_design <- results |> getCssDesign(testx, weighting="weighted_avg", cutoff=0.3,
min_num_clusts=1, max_num_clusts=3)
str(x_design)
?rowMeans
x_design
rowMeans(x_design)
str(x_design)
str(rowMeans(x_design))
?setdiff
remotes::install_github("jacobbien/litr-project", subdir = "litr",force=TRUE)
X <- matrix(rnorm(8*12), 12, 8)
cor_mat <- cor(X)
cor_mat
dist <- as.dist(1 - abs(cor_mat))
h <- hclust(dist)
# ï‚§	Look at dendrogram, on a popular issue
plot(h)
cor_cutoff <- 0.5
# we clustered the SNPs using the estimated correlations as a similarity
# measure with a single-linkage cutoff of 0.5, and settle for discovering
# important SNP clusters.
ct <-  cutree(h, h=cor_cutoff)
ct
table(ct)
X <- matrix(rnorm(8*12), 12, 8)
cor_mat <- cor(X)
cor_cutoff <- 0.5
dist <- as.dist(1 - abs(cor_mat))
h <- hclust(dist)
# we clustered the SNPs using the estimated correlations as a similarity
# measure with a single-linkage cutoff of 0.5, and settle for discovering
# important SNP clusters.
clus_assignments <-  cutree(h, h=cor_cutoff)
clus_assignments
p <- 8
X <- matrix(rnorm(p*12), 12, p)
cor_cutoff <- 0.5
cor_mat <- cor(X)
dist <- as.dist(1 - abs(cor_mat))
h <- hclust(dist)
clus_assignments <-  cutree(h, h=cor_cutoff)
stopifnot(length(clus_assignments) == p)
n_clusters <- length(unique(clus_assignments))
clus_assignments
n_clusters
clus_assignments
est_clusters <- list()
for(i in 1:n_clusters){
est_clusters[[i]] <- which(clus_assignments == i)
}
est_clusters
plot(h)
?hclust
?cor
?as.dist
?cutree
?detectCores
setwd("/Users/gregfaletto/Documents/GitHub/css-sims")
source("sim_5_1.R")
source("sim_5_1.R")
source("sim_5_1.R")
source("sim_5_1.R")
source("sim_5_1.R")
setwd("/Users/gregfaletto/Documents/GitHub/css-sims")
source("sim_5_1.R")
### Figure 3 (known clusters)
fig_3_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ],
n_methods - 2 - length(est_cluster_meths))
known_cluster_meths <- c("SS_CSS_sparse_cssr" # Sparse cluster stability selection
# , SS_GSS_random_custom # Sparse cluster stability selection
, "SS_CSS_weighted_cssr" # Weighted averaged cluster stability
# selection
, "SS_CSS_avg_cssr" # Simple averaged cluster stability
# selection
, "clusRepLasso_cssr" # Cluster representative lasso
, "protolasso_cssr" # Protolasso
)
est_cluster_meths <- c("SS_CSS_sparse_cssr_est" # Sparse cluster stability selection,
# estimated clusters
, "SS_CSS_weighted_cssr_est" # Weighted averaged cluster stability
# selection, estimated clusters
, "SS_CSS_avg_cssr_est" # Simple averaged cluster stability
# selection, estimated clusters
, "clusRepLasso_cssr_est" # Cluster representative lasso, estimated
# clusters
, "protolasso_cssr_est"
)
### Figure 3 (known clusters)
fig_3_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ],
n_methods - 2 - length(est_cluster_meths))
fig_3_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ])
fig_3_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ],
n_methods - 2 - length(est_cluster_meths))
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(fig_3_left + theme(legend.direction="horizontal"))
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
fig_3_left <- fig_3_left + theme(legend.position="none")
fig_3_mid <- fig_3_mid + theme(legend.position="none")
fig_3_right <- fig_3_right + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
fig_3 <- grid.arrange(fig_3_left, fig_3_mid, fig_3_right, legend, ncol=3,
nrow = 2, layout_matrix = rbind(c(1, 2, 3), c(4, 4, 4)),
widths = c(1.8, 1.8, 1.8), heights = c(2.5, 0.2))
fig_3 <- cowplot::ggdraw(fig_3) +
theme(plot.background = element_rect(fill="white", color = NA))
print(fig_3)
saveFigure2(subdir="figures", plot=fig_3, size="large", filename="fig_3_known.pdf")
### Versions of Figure 3 plots with all methods (for supplement)
fig_3_supp_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(est_cluster_meths)), ], n_methods - length(est_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_left, size="xmlarge",
filename="sim_1_known_mse_supp.pdf")
fig_3_supp_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(est_cluster_meths)), ])
saveFigure2(subdir="figures", plot=fig_3_supp_mid, size="xmlarge",
filename="sim_1_known_stab_supp.pdf")
fig_3_supp_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(est_cluster_meths)), ], n_methods - length(est_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_right, size="xmlarge",
filename="sim_1_known_mse_stab_supp.pdf")
### Figure 3 (estimated clusters)
fig_3_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", known_cluster_meths))), ],
n_methods - 2 - length(known_cluster_meths))
fig_3_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", known_cluster_meths))), ])
fig_3_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", known_cluster_meths))), ],
n_methods - 2 - length(known_cluster_meths))
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(fig_3_left + theme(legend.direction="horizontal"))
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
fig_3_left <- fig_3_left + theme(legend.position="none")
fig_3_mid <- fig_3_mid + theme(legend.position="none")
fig_3_right <- fig_3_right + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
fig_3 <- grid.arrange(fig_3_left, fig_3_mid, fig_3_right, legend, ncol=3,
nrow = 2, layout_matrix = rbind(c(1, 2, 3), c(4, 4, 4)),
widths = c(1.8, 1.8, 1.8), heights = c(2.5, 0.2))
fig_3 <- cowplot::ggdraw(fig_3) +
theme(plot.background = element_rect(fill="white", color = NA))
print(fig_3)
saveFigure2(subdir="figures", plot=fig_3, size="large", filename="fig_3_known.pdf")
### Versions of Figure 3 plots with all methods (for supplement)
fig_3_supp_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ], n_methods - length(known_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_left, size="xmlarge",
filename="sim_1_known_mse_supp.pdf")
fig_3_supp_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ])
saveFigure2(subdir="figures", plot=fig_3_supp_mid, size="xmlarge",
filename="sim_1_known_stab_supp.pdf")
fig_3_supp_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ], n_methods - length(known_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_right, size="xmlarge",
filename="sim_1_known_mse_stab_supp.pdf")
### Figure 3 (known clusters)
fig_3_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ],
n_methods - 2 - length(est_cluster_meths))
fig_3_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ])
fig_3_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ],
n_methods - 2 - length(est_cluster_meths))
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(fig_3_left + theme(legend.direction="horizontal"))
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
fig_3_left <- fig_3_left + theme(legend.position="none")
fig_3_mid <- fig_3_mid + theme(legend.position="none")
fig_3_right <- fig_3_right + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
fig_3 <- grid.arrange(fig_3_left, fig_3_mid, fig_3_right, legend, ncol=3,
nrow = 2, layout_matrix = rbind(c(1, 2, 3), c(4, 4, 4)),
widths = c(1.8, 1.8, 1.8), heights = c(2.5, 0.2))
fig_3 <- cowplot::ggdraw(fig_3) +
theme(plot.background = element_rect(fill="white", color = NA))
print(fig_3)
saveFigure2(subdir="figures", plot=fig_3, size="large", filename="fig_3_known.pdf")
### Versions of Figure 3 plots with all methods (for supplement)
fig_3_supp_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(est_cluster_meths)), ], n_methods - length(est_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_left, size="xmlarge",
filename="sim_1_known_mse_supp.pdf")
fig_3_supp_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(est_cluster_meths)), ])
saveFigure2(subdir="figures", plot=fig_3_supp_mid, size="xmlarge",
filename="sim_1_known_stab_supp.pdf")
fig_3_supp_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(est_cluster_meths)), ], n_methods - length(est_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_right, size="xmlarge",
filename="sim_1_known_mse_stab_supp.pdf")
### Figure 3 (estimated clusters)
fig_3_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", known_cluster_meths))), ],
n_methods - 2 - length(known_cluster_meths))
fig_3_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", known_cluster_meths))), ])
fig_3_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", known_cluster_meths))), ],
n_methods - 2 - length(known_cluster_meths))
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(fig_3_left + theme(legend.direction="horizontal"))
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
fig_3_left <- fig_3_left + theme(legend.position="none")
fig_3_mid <- fig_3_mid + theme(legend.position="none")
fig_3_right <- fig_3_right + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
fig_3 <- grid.arrange(fig_3_left, fig_3_mid, fig_3_right, legend, ncol=3,
nrow = 2, layout_matrix = rbind(c(1, 2, 3), c(4, 4, 4)),
widths = c(1.8, 1.8, 1.8), heights = c(2.5, 0.2))
fig_3 <- cowplot::ggdraw(fig_3) +
theme(plot.background = element_rect(fill="white", color = NA))
print(fig_3)
saveFigure2(subdir="figures", plot=fig_3, size="large", filename="fig_3_est.pdf")
### Versions of Figure 3 plots with all methods (for supplement)
fig_3_supp_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ], n_methods - length(known_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_left, size="xmlarge",
filename="sim_1_est_mse_supp.pdf")
fig_3_supp_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ])
saveFigure2(subdir="figures", plot=fig_3_supp_mid, size="xmlarge",
filename="sim_1_est_stab_supp.pdf")
fig_3_supp_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ], n_methods - length(known_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_right, size="xmlarge",
filename="sim_1_est_mse_stab_supp.pdf")
source("sim_5_1.R")
str(results_df)
unique(results_df$Method)
n_methods
n_methods - 2 - length(est_cluster_meths)
str(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ])
unique(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", est_cluster_meths))), ]$Method)
source("sim_5_1.R")
rlang::last_error()
unique(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", known_cluster_meths))), ]$Method)
unique(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr", "SS_CSS_avg_cssr", "SS_CSS_sparse_cssr_est",
"SS_CSS_avg_cssr_est", known_cluster_meths))), ]$Method)
n_methods - 4 - length(known_cluster_meths)
n_methods
unique(results$results_df$Method)
### Figure 3 (estimated clusters)
fig_3_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est",
"SS_CSS_avg_cssr_est", known_cluster_meths))), ],
n_methods - 2 - length(known_cluster_meths))
fig_3_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est", "SS_CSS_avg_cssr_est", known_cluster_meths))), ])
fig_3_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est", "SS_CSS_avg_cssr_est", known_cluster_meths))), ],
n_methods - 2 - length(known_cluster_meths))
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(fig_3_left + theme(legend.direction="horizontal"))
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
fig_3_left <- fig_3_left + theme(legend.position="none")
fig_3_mid <- fig_3_mid + theme(legend.position="none")
fig_3_right <- fig_3_right + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
fig_3 <- grid.arrange(fig_3_left, fig_3_mid, fig_3_right, legend, ncol=3,
nrow = 2, layout_matrix = rbind(c(1, 2, 3), c(4, 4, 4)),
widths = c(1.8, 1.8, 1.8), heights = c(2.5, 0.2))
fig_3 <- cowplot::ggdraw(fig_3) +
theme(plot.background = element_rect(fill="white", color = NA))
print(fig_3)
saveFigure2(subdir="figures", plot=fig_3, size="large", filename="fig_3_est.pdf")
### Versions of Figure 3 plots with all methods (for supplement)
fig_3_supp_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ], n_methods - length(known_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_left, size="xmlarge",
filename="sim_1_est_mse_supp.pdf")
fig_3_supp_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ])
saveFigure2(subdir="figures", plot=fig_3_supp_mid, size="xmlarge",
filename="sim_1_est_stab_supp.pdf")
fig_3_supp_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ], n_methods - length(known_cluster_meths))
saveFigure2(subdir="figures", plot=fig_3_supp_right, size="xmlarge",
filename="sim_1_est_mse_stab_supp.pdf")
source("sim_5_1.R")
source("sim_5_3.R")
source("sim_5_3.R")
source("sim_5_3.R")
source("sim_5_3.R")
source("sim_5_3.R")
source("sim_5_3.R")
source("sim_5_3.R")
source("sim_5_1.R")
source("sim_5_3.R")
rlang::last_error()
### Figure 4 (previously Figure 5) (estimated clusters)
fig_4_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est", "SS_CSS_avg_cssr_est", known_cluster_meths))), ],
n_methods - 2 - length(known_cluster_meths))
fig_4_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est", "SS_CSS_avg_cssr_est", known_cluster_meths))), ])
fig_4_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_css_estr", "SS_CSS_avg_cssr_est", known_cluster_meths))), ],
n_methods - 2 - length(known_cluster_meths))
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(fig_4_left + theme(legend.direction="horizontal"))
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
fig_4_left <- fig_4_left + theme(legend.position="none")
fig_4_mid <- fig_4_mid + theme(legend.position="none")
fig_4_right <- fig_4_right + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
fig_4 <- grid.arrange(fig_4_left, fig_4_mid, fig_4_right, legend, ncol=3,
nrow = 2, layout_matrix = rbind(c(1, 2, 3), c(4, 4, 4)),
widths = c(1.8, 1.8, 1.8), heights = c(2.5, 0.2))
rlang::last_error()
source("sim_5_3.R")
rlang::last_error()
fig_4_left
createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est", "SS_CSS_avg_cssr_est",
known_cluster_meths))), ], n_methods - 2 - length(known_cluster_meths))
n_methods
methods
unique(results_df$Method)
source("sim_5_3.R")
### Figure 4 (previously Figure 5) (estimated clusters)
fig_4_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est", "SS_CSS_avg_cssr_est",
known_cluster_meths))), ], n_methods - 2 - length(known_cluster_meths))
fig_4_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est", "SS_CSS_avg_cssr_est",
known_cluster_meths))), ])
fig_4_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(c("SS_CSS_sparse_cssr_est", "SS_CSS_avg_cssr_est",
known_cluster_meths))), ], n_methods - 2 - length(known_cluster_meths))
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(fig_4_left + theme(legend.direction="horizontal"))
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
fig_4_left <- fig_4_left + theme(legend.position="none")
fig_4_mid <- fig_4_mid + theme(legend.position="none")
fig_4_right <- fig_4_right + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
fig_4 <- grid.arrange(fig_4_left, fig_4_mid, fig_4_right, legend, ncol=3,
nrow = 2, layout_matrix = rbind(c(1, 2, 3), c(4, 4, 4)),
widths = c(1.8, 1.8, 1.8), heights = c(2.5, 0.2))
fig_4 <- cowplot::ggdraw(fig_4) +
theme(plot.background = element_rect(fill="white", color = NA))
print(fig_4)
saveFigure2(subdir="figures", plot=fig_4, size="large", filename="fig_4_est.pdf")
### Versions of Figure 4 plots with all methods (for supplement)
fig_4_supp_left <- createLossesPlot3(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ], n_methods - length(known_cluster_meths))
saveFigure2(subdir="figures", plot=fig_4_supp_left, size="xmlarge",
filename="sim_2_est_mse_supp.pdf")
fig_4_supp_mid <- createNSBStabPlot2(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ])
saveFigure2(subdir="figures", plot=fig_4_supp_mid, size="xmlarge",
filename="sim_2_est_stab_supp.pdf")
fig_4_supp_right <- createStabMSEPlot2(results_df[!(results_df$Method %in%
nameMap(known_cluster_meths)), ], n_methods - length(known_cluster_meths))
saveFigure2(subdir="figures", plot=fig_4_supp_right, size="xmlarge",
filename="sim_2_est_mse_stab_supp.pdf")
source("sim_5_3.R")
?sample
?setdiff
?sample
