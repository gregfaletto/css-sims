print("beta_hat_1:")
print(mean(beta_hat_1))
print(sum((beta_hat_1 - beta_star)^2)/nsims)
print("beta_hat_2:")
print(mean(beta_hat_2))
print(sum((beta_hat_2 - beta_star)^2)/nsims)
rm(list=ls())
n <- 100
nsims <- 1000
beta_hat_1 <- rep(as.numeric(NA), nsims)
beta_hat_2 <- rep(as.numeric(NA), nsims)
beta_star <- 1
for(i in 1:nsims){
# T_feat <- rbinom(n, size=1, prob=.5)
T_feat <- rnorm(n)
# X <- .5*rnorm(n) + .5*T_feat
X <- rnorm(n)
epsilon <- rnorm(n)
y <- beta_star*X + T_feat + T_feat*X + epsilon
df <- data.frame(y=y, t=T_feat, x=X)
model1 <- lm(y ~ x, df)
model2 <- lm(y ~ x + t, df)
beta_hat_1[i] <- coef(model1)["x"]
beta_hat_2[i] <- coef(model2)["x"]
}
print("beta_hat_1:")
print(mean(beta_hat_1))
print(sum((beta_hat_1 - beta_star)^2)/nsims)
print("beta_hat_2:")
print(mean(beta_hat_2))
print(sum((beta_hat_2 - beta_star)^2)/nsims)
(291.46 + 40.06)/2
1715.22
6946.51-1715.22-1500
1041.69+3731.29
3731.29+1041.69-100
3731.29+1041.69-100-4282.50
?is.data.frame
library(MASS)
fractions(2/18 - 1/256)
fractions(4*(1/3 - 1/5))
fractions(4*(1/4 - 1/6))
fractions(1/3 - (8/15)^2)
package_version("testthat")
library(testthat)
package_version("testthat")
packageVersion("testthat")
remotes::install_github("jacobbien/litr-project", subdir = "litr")
rm(list=ls())
rmarkdown::draft("create-rhello.Rmd", template = "make-an-r-package", package = "litr")
rmarkdown::draft("create-rhello.Rmd", template = "make-an-r-package", package = "litr")
?case_when
library(tidyverse)
p <- c(4/16, 3/16, 2/16, 1/16, 3/16, 2/16, 1/16)
sum(p)
x <- c(0:3, -1:-3)
x
x %*% p
(x - 0)^2 %*% p
sqrt((x - 0)^2 %*% p)
2.5*16
500*1/2400 + 4*4/2400 + 10*10/2400
library(MASS)
fractions(500*1/2400 + 4*4/2400 + 10*10/2400)
77*8
x <- c(500, 4, 10, 0)
p <- c(1/2400, 4/2400, 10/2400, 2385/2400)
sum(p)
(x - 77/300)^2 %*% p
sqrt((x - 77/300)^2 %*% p)
x %*% p
77/300*5
x <- c(-1000, 0, 1000, 2000, 3000)
p <- c(0.13, 0.15, .24, 0.35, 0.13)
x %*% p
sum(p)
(1 - .45)^10
1 - (1 - .45)^10 - 10*.45*(1 - .45)^9
?binomcdf
?rbinom
pbinom(q=5, size=10, prob=0.45)
pbinom(q=0, size=10, prob=0.45)
pbinom(q=1, size=10, prob=0.45)
(1 - .45)^10 + 10*.45*(1 - .45)^9
dbinom(x=3, size=5, prob=0.25)
qnorm(p=0.7, mean=125, sd=6.5)
1 - .7^5 - 5*.3*.7^4
?rgeom
(1 - .19)^4*.19
1/.19
1 - pgeom(10, .19)
4*.6^3*.4 + .6^4
15*.6
sqrt(15*.6*.4)
5400+3070+2200-1720
5400+3070+2200-1720-6033
81346 - 75323
564-69
library(cssr)
data <- genClusteredData(n = 200, # Sample size
p = 100, # Number of features
cluster_size = 10, # Number of features in a cluster correlated with a latent variable
k_unclustered = 10, # Number of unclustered features that influence y
snr = 3 # Signal-to-noise ratio in the response y generated from the data.
)
X <- data$X
y <- data$y
output <- cssSelect(X, y)
rm(list=ls())
data <- genClusteredData(n = 80, # Sample size
p = 40, # Number of features
cluster_size = 10, # Number of features in a cluster correlated with a latent variable
k_unclustered = 10, # Number of unclustered features that influence y
snr = 3 # Signal-to-noise ratio in the response y generated from the data.
)
X <- data$X
y <- data$y
output <- cssSelect(X, y)
output <- cssSelect(X, y)
output$selected_feats
clus_output <- cssSelect(X, y, clusters=list("Z_cluster"=1:10))
clus_output <- cssSelect(X, y, clusters=list("Z_cluster"=1:10))
clus_output$selected_feats
clus_output$selected_clusts
clusters <- list("Z_clust"=1:10, 50:55)
# Wrapper functions (easy!)
n_test <- 50
n <- 200
p <- 100
testx <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
cssPredict(X, y, testx, clusters)
clusters <- list("Z_clust"=1:10, 36:40)
# Wrapper functions (easy!)
n_test <- 50
n <- 80
p <- 40
testx <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
# cssPredict(X, y, testx, clusters)
cssPredict(X, y, testx, clusters)
n_test <- 50
n <- 200
p <- 40
testx <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
cssPredict(X, y, testx, clusters)
inds <- 1:round(n/2)
lambda <- getLassoLambda(X[setdiff(1:n, inds), ], y[setdiff(1:n, inds)])
lambda <- getLassoLambda(X, y)
lambda
results <- css(X=X, y=y, lambda=lambda
, clusters=clusters
# , clusters=list()
# , clusters=1:10
# , sampling.type = "SS"
# B = 100,
# , prop_feats_remove = .5
, train_inds = inds
)
inds <- 1:round(n/2)
results <- css(X=X, y=y, lambda=lambda
, clusters=clusters
# , clusters=list()
# , clusters=1:10
# , sampling.type = "SS"
# B = 100,
# , prop_feats_remove = .5
, train_inds = inds
)
nrow(X)
n
inds <- 1:40
results <- css(X=X, y=y, lambda=lambda
, clusters=clusters
# , clusters=list()
# , clusters=1:10
# , sampling.type = "SS"
# B = 100,
# , prop_feats_remove = .5
, train_inds = inds
)
str(results)
predictions <- results |> getCssPreds(testX = testx, weighting="sparse",
cutoff=0.3
, min_num_clusts=1
, max_num_clusts=3
)
predictions
train_x <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
train_y <- rnorm(n_test)
preds2 <- results |> getCssPreds(testX = testx, weighting=w,
cutoff=c, min_num_clusts=1, max_num_clusts=3,
trainX=train_x
, trainY=train_y
)
preds2 <- results |> getCssPreds(testX = testx, weighting="sparse",
cutoff=0.3, min_num_clusts=1, max_num_clusts=3,
trainX=train_x
, trainY=train_y)
preds2
selections <- results |> getCssSelections(weighting=w, cutoff=c
# , min_num_clusts=1
# , max_num_clusts=3
)
selections <- results |> getCssSelections(weighting="sparse", cutoff=0.3
# , min_num_clusts=1
# , max_num_clusts=3
)
str(selections)
selections$selected_clusts
selections$selected_feats
results |> print.cssr(cutoff=c, min_num_clusts=1, max_num_clusts=3)
print(results)
print(results, cutoff=0.3, max_num_clusts=5)
x_design <- results |> getCssDesign(testx, weighting=w, cutoff=c, min_num_clusts=1, max_num_clusts=3)
x_design <- results |> getCssDesign(testx, weighting="weighted_avg", cutoff=0.3,
min_num_clusts=1, max_num_clusts=3)
str(x_design)
rm(list=ls())
data <- genClusteredData(n = 80, # Sample size
p = 40, # Number of features
cluster_size = 10, # Number of features in a cluster correlated with a latent variable
k_unclustered = 10, # Number of unclustered features that influence y
snr = 3 # Signal-to-noise ratio in the response y generated from the data.
)
X <- data$X
y <- data$y
output <- cssSelect(X, y)
output$selected_feats
library(cssr)
data <- genClusteredData(n = 80, # Sample size
p = 40, # Number of features
cluster_size = 10, # Number of features in a cluster correlated with a latent variable
k_unclustered = 10, # Number of unclustered features that influence y
snr = 3 # Signal-to-noise ratio in the response y generated from the data.
)
X <- data$X
y <- data$y
output <- cssSelect(X, y)
output$selected_feats
clus_output <- cssSelect(X, y, clusters=list("Z_cluster"=1:10))
clus_output$selected_feats
clus_output$selected_clusts
clusters <- list("Z_clust"=1:10, 36:40)
# Wrapper functions (easy!)
n_test <- 50
n <- 80
p <- 40
testx <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
cssPredict(X, y, testx, clusters)
# Get a good lambda
lambda <- getLassoLambda(X, y)
# clusters <- list(1:10, 46:40)
# clusters <- 1:10
inds <- 1:40
results <- css(X=X, y=y, lambda=lambda
, clusters=clusters
# , clusters=list()
# , clusters=1:10
# , sampling.type = "SS"
# B = 100,
# , prop_feats_remove = .5
, train_inds = inds
)
str(results)
predictions <- results |> getCssPreds(testX = testx, weighting="sparse",
cutoff=0.3
, min_num_clusts=1
, max_num_clusts=3
)
predictions
train_x <- matrix(rnorm(n_test*p), nrow=n_test, ncol=p)
train_y <- rnorm(n_test)
preds2 <- results |> getCssPreds(testX = testx, weighting="sparse",
cutoff=0.3, min_num_clusts=1, max_num_clusts=3,
trainX=train_x
, trainY=train_y)
preds2
selections <- results |> getCssSelections(weighting="sparse", cutoff=0.3
# , min_num_clusts=1
# , max_num_clusts=3
)
str(selections)
selections$selected_clusts
selections$selected_feats
print(results, cutoff=0.3, max_num_clusts=5)
x_design <- results |> getCssDesign(testx, weighting="weighted_avg", cutoff=0.3,
min_num_clusts=1, max_num_clusts=3)
str(x_design)
?rowMeans
x_design
rowMeans(x_design)
str(x_design)
str(rowMeans(x_design))
?setdiff
remotes::install_github("jacobbien/litr-project", subdir = "litr",force=TRUE)
4*81
2*3^4
162*2
1750/5000
runif(1)
runif(1)
setwd("/Users/gregfaletto/Documents/GitHub/css-sims")
source("plant.R")
qnorm(.045)
qnorm(0.07)
qnorm(0.04)
(3.7 - 3.63)/(.22/sqrt(60))
pnrom((3.7 - 3.63)/(.22/sqrt(60)))
pnorm((3.7 - 3.63)/(.22/sqrt(60)))
1 - pnorm((3.7 - 3.63)/(.22/sqrt(60)))
(200 - 195)/(16/sqrt(30))
1 - pnorm((200 - 195)/(16/sqrt(30)))
(3346 - 2900)/(400/sqrt(8))
1 - pnorm((3346 - 2900)/(400/sqrt(8)))
(539 - 559)/(51/sqrt(16))
pt((539 - 559)/(51/sqrt(16)), df=15)
(1.7 - 1.65)/(.9/sqrt(22))
1 - pt((1.7 - 1.65)/(.9/sqrt(22)), df=21)
(33924 - 29112)/(11830.35/sqrt(21))
1 - pt((33924 - 29112)/(11830.35/sqrt(21)), df=20)
18/60
(.3 - .4)/sqrt(.4*(1 - .4)/60)
pnorm((.3 - .4)/sqrt(.4*(1 - .4)/60))
qnorm(0.05)
(31/100 - .25)/(sqrt(.25*(1 - .25)/100))
df_data_app_stats <- function(e_df, css_meth="SS_CSS_weighted_cssr_plant",
methods_to_compare=c("SS_SS_cssr_plant", "clusRepLasso_cssr_plant",
"protolasso_cssr_plant", "lasso_random_plant", "SS_CSS_avg_cssr_plant")){
metric <- "cssr_mse_plant"
stopifnot(metric %in% colnames(e_df))
method_names <- unique(e_df$Method)
stopifnot(css_meth %in% method_names)
stopifnot(all(methods_to_compare %in% method_names))
css_meth_mses <- e_df[e_df$Method == css_meth, metric]
sample_size <- length(css_meth_mses)
print("sample size:")
print(sample_size)
css_meth_mean <- mean(css_meth_mses)
# Sample means and standard errors
css_meth_mean <- signif(css_meth_mean, digits=3)
n_comps <- length(methods_to_compare)
comp_means <- rep(as.numeric(NA), n_comps)
for(i in 1:n_comps){
meth_i_mses <- e_df[e_df$Method == methods_to_compare[i], metric]
stopifnot(length(meth_i_mses) == sample_size)
meth_i_mean <- mean(meth_i_mses)
comp_means[i] <- signif(meth_i_mean, digits=3)
}
stopifnot(all(!is.na(comp_means)))
mean_df <- c(css_meth_mean, comp_means)
names(mean_df) <- c(nameMap(css_meth), nameMap(methods_to_compare))
return(mean_df)
}
e_df <- evals(plant_sim) |> as.data.frame()
res <- df_data_app_stats(e_df)
df_data_app_stats <- function(e_df, css_meth="SS_CSS_weighted_cssr_plant",
methods_to_compare=c("SS_SS_cssr_plant", "clusRepLasso_cssr_plant",
"protolasso_cssr_plant", "lasso_random_plant", "SS_CSS_avg_cssr_plant")){
metric <- "cssr_mse_plant"
stopifnot(metric %in% colnames(e_df))
method_names <- unique(e_df$Method)
stopifnot(css_meth %in% method_names)
stopifnot(all(methods_to_compare %in% method_names))
css_meth_mses <- e_df[e_df$Method == css_meth, metric]
sample_size <- length(css_meth_mses)
print("sample size:")
print(sample_size)
css_meth_mean <- mean(css_meth_mses)
# Sample means and standard errors
css_meth_mean <- signif(css_meth_mean, digits=3)
n_comps <- length(methods_to_compare)
comp_means <- rep(as.numeric(NA), n_comps)
for(i in 1:n_comps){
meth_i_mses <- e_df[e_df$Method == methods_to_compare[i], metric]
stopifnot(length(meth_i_mses) == sample_size)
meth_i_mean <- mean(meth_i_mses)
print("method i:")
print(methods_to_compare[i])
comp_means[i] <- signif(meth_i_mean, digits=3)
print("comp_means[i]:")
print(comp_means[i])
}
stopifnot(all(!is.na(comp_means)))
mean_df <- c(css_meth_mean, comp_means)
names(mean_df) <- c(nameMap(css_meth), nameMap(methods_to_compare))
return(mean_df)
}
res <- df_data_app_stats(e_df)
str(e_df)
df_data_app_stats <- function(e_df, css_meth="SS_CSS_weighted_cssr_plant",
methods_to_compare=c("SS_SS_cssr_plant", "clusRepLasso_cssr_plant",
"protolasso_cssr_plant", "lasso_random_plant", "SS_CSS_avg_cssr_plant")){
metric <- "cssr_mse_plant"
stopifnot(metric %in% colnames(e_df))
method_names <- unique(e_df$Method)
stopifnot(css_meth %in% method_names)
stopifnot(all(methods_to_compare %in% method_names))
css_meth_mses <- e_df[e_df$Method == css_meth, metric]
sample_size <- length(css_meth_mses)
print("sample size:")
print(sample_size)
css_meth_mean <- mean(css_meth_mses)
# Sample means and standard errors
css_meth_mean <- signif(css_meth_mean, digits=3)
n_comps <- length(methods_to_compare)
comp_means <- rep(as.numeric(NA), n_comps)
for(i in 1:n_comps){
meth_i_mses <- e_df[e_df$Method == methods_to_compare[i], metric]
stopifnot(length(meth_i_mses) == sample_size)
meth_i_mean <- mean(meth_i_mses)
print("method i:")
print(methods_to_compare[i])
print("meth_i_mean:")
print(meth_i_mean)
comp_means[i] <- signif(meth_i_mean, digits=3)
print("comp_means[i]:")
print(comp_means[i])
}
stopifnot(all(!is.na(comp_means)))
mean_df <- c(css_meth_mean, comp_means)
names(mean_df) <- c(nameMap(css_meth), nameMap(methods_to_compare))
return(mean_df)
}
res <- df_data_app_stats(e_df)
edf[edf$Method == "clusRepLasso_cssr_plant",]
e_df[e_df$Method == "clusRepLasso_cssr_plant",]
df_data_app_stats <- function(e_df, css_meth="SS_CSS_weighted_cssr_plant",
methods_to_compare=c("SS_SS_cssr_plant", "clusRepLasso_cssr_plant",
"protolasso_cssr_plant", "lasso_random_plant", "SS_CSS_avg_cssr_plant")){
metric <- "cssr_mse_plant"
stopifnot(metric %in% colnames(e_df))
method_names <- unique(e_df$Method)
stopifnot(css_meth %in% method_names)
stopifnot(all(methods_to_compare %in% method_names))
css_meth_mses <- e_df[e_df$Method == css_meth, metric]
sample_size <- length(css_meth_mses)
print("sample size:")
print(sample_size)
css_meth_mean <- mean(css_meth_mses)
# Sample means and standard errors
css_meth_mean <- signif(css_meth_mean, digits=3)
n_comps <- length(methods_to_compare)
comp_means <- rep(as.numeric(NA), n_comps)
for(i in 1:n_comps){
meth_i_mses <- e_df[e_df$Method == methods_to_compare[i], metric]
stopifnot(length(meth_i_mses) == sample_size)
meth_i_mean <- mean(meth_i_mses, na.rm=TRUE)
# print("method i:")
# print(methods_to_compare[i])
# print("meth_i_mean:")
# print(meth_i_mean)
comp_means[i] <- signif(meth_i_mean, digits=3)
# print("comp_means[i]:")
# print(comp_means[i])
}
stopifnot(all(!is.na(comp_means)))
mean_df <- c(css_meth_mean, comp_means)
names(mean_df) <- c(nameMap(css_meth), nameMap(methods_to_compare))
return(mean_df)
}
res <- df_data_app_stats(e_df)
res
df_data_app_stats <- function(e_df, css_meth="SS_CSS_weighted_cssr_plant",
methods_to_compare=c("SS_SS_cssr_plant", "clusRepLasso_cssr_plant",
"protolasso_cssr_plant", "lasso_random_plant", "SS_CSS_avg_cssr_plant")){
metric <- "cssr_mse_plant"
stopifnot(metric %in% colnames(e_df))
method_names <- unique(e_df$Method)
stopifnot(css_meth %in% method_names)
stopifnot(all(methods_to_compare %in% method_names))
css_meth_mses <- e_df[e_df$Method == css_meth, metric]
sample_size <- length(css_meth_mses)
print("sample size:")
print(sample_size)
css_meth_mean <- mean(css_meth_mses, na.rm=TRUE)
# Sample means and standard errors
css_meth_mean <- signif(css_meth_mean, digits=3)
n_comps <- length(methods_to_compare)
comp_means <- rep(as.numeric(NA), n_comps)
for(i in 1:n_comps){
meth_i_mses <- e_df[e_df$Method == methods_to_compare[i], metric]
stopifnot(length(meth_i_mses) == sample_size)
meth_i_mean <- mean(meth_i_mses, na.rm=TRUE)
comp_means[i] <- signif(meth_i_mean, digits=3)
}
stopifnot(all(!is.na(comp_means)))
mean_df <- c(css_meth_mean, comp_means)
names(mean_df) <- c(nameMap(css_meth), nameMap(methods_to_compare))
return(mean_df)
}
res <- df_data_app_stats(e_df)
res
?hclust
setwd("/Users/gregfaletto/Documents/GitHub/css-sims")
source("plant.R")
setwd("/Users/gregfaletto/Documents/GitHub/css-sims")
source("plant.R")
setwd("/Users/gregfaletto/Documents/GitHub/css-sims")
source("plant.R")
source("plant.R")
setwd("/Users/gregfaletto/Documents/GitHub/css-sims")
source("plant.R")
source("plant.R")
4200/.3
4200/.3*12
4200/.3*12 - 50000
source("plant.R")
source("plant.R")
setwd("/Users/gregfaletto/Documents/GitHub/css-sims")
source("plant.R")
source("plant.R")
250*50*5
?hclust
